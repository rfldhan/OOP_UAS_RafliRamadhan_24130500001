# -*- coding: utf-8 -*-
"""OOP_UAS1_Rafli Ramadhan_24130500001

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vqYsKSH_VczL8kYeveN2R9tPlfNP7fjH
"""

#OOP_UAS1_RafliRamadhan_24130500001
"""
Implementasi Class Diagram untuk Studi Kasus FC Cakrawala.

Script ini mendefinisikan kelas-kelas untuk merepresentasikan struktur
klub sepak bola berdasarkan cerita yang diberikan, termasuk relasi
antar kelas dan multiplicity-nya.
"""

class Person:
    """
    Kelas dasar yang merepresentasikan seorang individu.
    Kelas ini berfungsi sebagai parent class untuk Player dan Coach.
    Access Specifier: Atribut menggunakan underscore (_) untuk menandakan 'protected'.
    """
    def __init__(self, name, birth_date):
        self._name = name
        self._birth_date = birth_date

    def get_name(self):
        """Mengembalikan nama lengkap individu."""
        return self._name

    def display_info(self):
        """Menampilkan informasi dasar individu."""
        return f"Nama: {self._name}, Tanggal Lahir: {self._birth_date}"


class Player(Person):
    """
    Kelas yang merepresentasikan seorang pemain.
    Merupakan turunan (inheritance) dari kelas Person.
    Seorang Player 'adalah' seorang Person.
    """
    def __init__(self, name, birth_date, jersey_number, position):
        super().__init__(name, birth_date)
        self._jersey_number = jersey_number
        self._position = position

    def display_info(self):
        """Menampilkan informasi detail seorang pemain."""
        person_info = super().display_info()
        return f"{person_info}, No. Punggung: {self._jersey_number}, Posisi: {self._position}"


class Coach(Person):
    """
    Kelas yang merepresentasikan seorang pelatih.
    Merupakan turunan (inheritance) dari kelas Person.
    Seorang Coach 'adalah' seorang Person.
    """
    def __init__(self, name, birth_date, role):
        super().__init__(name, birth_date)
        # Role bisa berupa "Head Coach" atau "Assistant Coach"
        self._role = role

    def display_info(self):
        """Menampilkan informasi detail seorang pelatih."""
        person_info = super().display_info()
        return f"{person_info}, Peran: {self._role}"


class Team:
    """
    Kelas yang merepresentasikan sebuah tim sepak bola.
    Relasi:
    - Agregasi dengan Player (sebuah tim 'memiliki' pemain).
    - Agregasi dengan Coach (sebuah tim 'memiliki' pelatih).
    Multiplicity:
    - 1 Tim memiliki 1..* Pemain.
    - 1 Tim memiliki 1..* Pelatih.
    """
    def __init__(self, name):
        self._name = name
        self._players = []  # List untuk menampung objek Player
        self._coaches = []  # List untuk menampung objek Coach

    def add_player(self, player):
        """Menambahkan objek pemain ke dalam tim."""
        if isinstance(player, Player):
            self._players.append(player)
        else:
            print("Error: Hanya objek Player yang bisa ditambahkan.")

    def add_coach(self, coach):
        """Menambahkan objek pelatih ke dalam tim."""
        if isinstance(coach, Coach):
            self._coaches.append(coach)
        else:
            print("Error: Hanya objek Coach yang bisa ditambahkan.")

    def display_team_details(self):
        """Menampilkan seluruh detail tim, termasuk pelatih dan pemain."""
        print("-" * 30)
        print(f"Detail Tim: {self._name}")
        print("-" * 30)

        print("\n[Staf Pelatih]")
        if not self._coaches:
            print("Belum ada pelatih terdaftar.")
        else:
            for coach in self._coaches:
                print(f"- {coach.display_info()}")

        print("\n[Skuad Pemain]")
        if not self._players:
            print("Belum ada pemain terdaftar.")
        else:
            for player in self._players:
                print(f"- {player.display_info()}")
        print("-" * 30)


class Club:
    """
    Kelas yang merepresentasikan sebuah klub sepak bola.
    Relasi:
    - Komposisi dengan Team (sebuah klub 'terdiri dari' tim).
    Multiplicity:
    - 1 Klub memiliki 1..* Tim.
    """
    def __init__(self, name):
        self._name = name
        self._teams = [] # List untuk menampung objek Team

    def add_team(self, team):
        """Menambahkan objek tim ke dalam klub."""
        if isinstance(team, Team):
            self._teams.append(team)
        else:
            print("Error: Hanya objek Team yang bisa ditambahkan.")

    def display_club_structure(self):
        """Menampilkan struktur keseluruhan klub."""
        print("=" * 40)
        print(f"Struktur Klub: {self._name}")
        print("=" * 40)
        if not self._teams:
            print("Klub ini belum memiliki tim.")
        else:
            for team in self._teams:
                team.display_team_details()
        print("=" * 40)


# --- Main Program ---
# Implementasi cerita "FC Cakrawala"

if __name__ == "__main__":
    # 1. Membuat instance Club
    fc_cakrawala = Club("FC Cakrawala")

    # 2. Membuat instance Team U-23
    fc_cakrawala_muda = Team("FC Cakrawala Muda (U-23)")

    # 3. Menambahkan tim ke dalam klub (Relasi Komposisi)
    fc_cakrawala.add_team(fc_cakrawala_muda)

    # 4. Membuat instance untuk Head Coach dan Assistant Coach
    head_coach = Coach("Budi Santoso", "15-05-1980", "Head Coach")
    assistant_coach = Coach("Agus Wijoyo", "20-08-1985", "Assistant Coach")

    # 5. Menambahkan para pelatih ke dalam tim (Relasi Agregasi)
    fc_cakrawala_muda.add_coach(head_coach)
    fc_cakrawala_muda.add_coach(assistant_coach)

    # 6. Membuat 15 instance Player
    players_data = [
        {"name": "Andi", "dob": "10-01-2002", "jersey": 1, "pos": "Goalkeeper"},
        {"name": "Bambang", "dob": "22-03-2001", "jersey": 5, "pos": "Defender"},
        {"name": "Candra", "dob": "14-07-2001", "jersey": 4, "pos": "Defender"},
        {"name": "Dedi", "dob": "05-11-2002", "jersey": 2, "pos": "Defender"},
        {"name": "Eko", "dob": "30-01-2001", "jersey": 3, "pos": "Defender"},
        {"name": "Fajar", "dob": "12-06-2002", "jersey": 6, "pos": "Midfielder"},
        {"name": "Gilang", "dob": "19-09-2001", "jersey": 8, "pos": "Midfielder"},
        {"name": "Hadi", "dob": "25-02-2002", "jersey": 10, "pos": "Midfielder"},
        {"name": "Indra", "dob": "01-05-2001", "jersey": 7, "pos": "Forward"},
        {"name": "Joko", "dob": "03-08-2002", "jersey": 11, "pos": "Forward"},
        {"name": "Kurniawan", "dob": "18-10-2001", "jersey": 9, "pos": "Forward"},
        {"name": "Lutfi", "dob": "09-04-2002", "jersey": 12, "pos": "Substitute"},
        {"name": "Maman", "dob": "21-12-2001", "jersey": 13, "pos": "Substitute"},
        {"name": "Nanang", "dob": "28-07-2002", "jersey": 14, "pos": "Substitute"},
        {"name": "Oki", "dob": "16-03-2001", "jersey": 15, "pos": "Substitute"},
    ]

    for p_data in players_data:
        player = Player(p_data["name"], p_data["dob"], p_data["jersey"], p_data["pos"])
        # Menambahkan pemain ke dalam tim (Relasi Agregasi)
        fc_cakrawala_muda.add_player(player)

    # 7. Menampilkan seluruh struktur klub yang telah dibuat
    fc_cakrawala.display_club_structure()